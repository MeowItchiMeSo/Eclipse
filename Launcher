using System;
using System.IO;
using System.Threading.Tasks;
using Discord;
using Discord.WebSocket;

class Program
{
    private const string USERNAME = "admin";
    private const string PASSWORD = "password";

    private DiscordSocketClient _client;

    static void Main(string[] args)
    {
        new Program().RunBotAsync().GetAwaiter().GetResult();
    }

    public async Task RunBotAsync()
    {
        _client = new DiscordSocketClient();

        _client.Log += LogAsync;

        await _client.LoginAsync(TokenType.Bot, "YOUR_BOT_TOKEN");
        await _client.StartAsync();

        _client.MessageReceived += MessageReceivedAsync;

        await Task.Delay(-1);
    }

    private Task LogAsync(LogMessage log)
    {
        Console.WriteLine(log);
        return Task.CompletedTask;
    }

    private async Task MessageReceivedAsync(SocketMessage message)
    {
        if (message.Author.IsBot) return;

        if (message.Content.ToLower() == "!login")
        {
            await message.Channel.SendMessageAsync("Please enter your username:");
            string enteredUsername = (await _client.GetNextMessageAsync()).Content;

            await message.Channel.SendMessageAsync("Please enter your password:");
            string enteredPassword = (await _client.GetNextMessageAsync()).Content;

            if (IsValidLogin(enteredUsername, enteredPassword))
            {
                await message.Channel.SendMessageAsync($"Login successful. Welcome, {USERNAME}!");
                await DisplayOptionsAsync(message.Channel);
            }
            else
            {
                await message.Channel.SendMessageAsync("Invalid username or password. Access denied.");
            }
        }
    }

    private bool IsValidLogin(string enteredUsername, string enteredPassword)
    {
        return enteredUsername == USERNAME && enteredPassword == PASSWORD;
    }

    private async Task DisplayOptionsAsync(IMessageChannel channel)
    {
        await channel.SendMessageAsync("\nLauncher Options:");
        await channel.SendMessageAsync("1. List Directory Contents");
        await channel.SendMessageAsync("2. Launch Application");
        await channel.SendMessageAsync("3. Exit");
        await channel.SendMessageAsync("Choose an option by typing its number:");
    }

    private async Task ListDirectoryContentsAsync(IMessageChannel channel)
    {
        await channel.SendMessageAsync("Enter the directory path:");
        string directoryPath = (await _client.GetNextMessageAsync()).Content.Trim();

        if (string.IsNullOrEmpty(directoryPath))
        {
            await channel.SendMessageAsync("Directory path cannot be empty. Please enter a valid directory path.");
            return;
        }

        if (Directory.Exists(directoryPath))
        {
            string[] files = Directory.GetFiles(directoryPath);
            string[] directories = Directory.GetDirectories(directoryPath);

            if (files.Length > 0 || directories.Length > 0)
            {
                string fileList = $"Files and folders in directory: {directoryPath}\n";
                foreach (string file in files)
                {
                    fileList += Path.GetFileName(file) + "\n";
                }
                foreach (string directory in directories)
                {
                    fileList += Path.GetFileName(directory) + "\n";
                }
                await channel.SendMessageAsync(fileList);
            }
            else
            {
                await channel.SendMessageAsync("No files or folders found in the directory.");
            }
        }
        else
        {
            await channel.SendMessageAsync("Invalid directory path. Please enter a valid directory path.");
        }
    }
}
